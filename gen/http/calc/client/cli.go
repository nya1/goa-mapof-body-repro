// Code generated by goa v3.7.2, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen calcsvc/design

package client

import (
	calc "calcsvc/gen/calc"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildMultiplyPayload builds the payload for the calc multiply endpoint from
// CLI flags.
func BuildMultiplyPayload(calcMultiplyBody string) (*calc.MultiplyPayload, error) {
	var err error
	var body MultiplyRequestBody
	{
		err = json.Unmarshal([]byte(calcMultiplyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"anyobject\": {\n         \"ob\": {\n            \"ok\": 1,\n            \"testk\": \"testl\"\n         },\n         \"test\": 10\n      }\n   }'")
		}
		if body.Anyobject == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("anyobject", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &calc.MultiplyPayload{}
	if body.Anyobject != nil {
		v.Anyobject = make(map[string]interface{}, len(body.Anyobject))
		for key, val := range body.Anyobject {
			tk := key
			tv := val
			v.Anyobject[tk] = tv
		}
	}

	return v, nil
}
